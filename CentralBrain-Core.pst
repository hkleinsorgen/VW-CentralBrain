<?xml version="1.0"?><st-source><!-- Name: CentralBrain-CoreDevelopmentPrerequisites: #(#(#any 'Xtreams-Transforms' '') #(#any 'HTTP' ''))KSignature: #('definedClasses' 29 'definedClassesHash' 21143309950 'extendedClasses' 0 'extendedClassesHash' 0)KSignatureV2: #('definedClasses' 29 'definedClassesHash' 130169634312260926105547140696133817969718847933 'extendedClasses' 0 'extendedClassesHash' 1245845410931227995499360226027473197403882391305)PackageName: CentralBrain-CoreParcel: #('CentralBrain-Core')PrerequisiteDescriptions: #(#(#name 'Xtreams-Transforms' #componentType #package) #(#name 'HTTP' #componentType #bundle))PrerequisiteParcels: #(#('Xtreams-Transforms' '') #('HTTP' ''))Version: 0.0.9Date: 5:29:54 PM May 12, 2024 --><time-stamp>From VisualWorksÂ®, 9.4 of 5. Januar 2024 on 12. Mai 2024 at 17:29:54</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>CB</name><environment>Smalltalk</environment><private>false</private><imports>			private Core.*			</imports><category></category><attributes><package>CentralBrain-Core</package></attributes></name-space><class><name>ChatMessage</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text role metadata attachment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>Chat</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>promptMessage messages chooseCompletionBlock options modelContext </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>ChatCompletion</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>choices </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>VectorStoreInterface</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>ChatCompletionChoice</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>message metadata </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>Document</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id text metadata </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>NamedObject</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>ChatRole</name><environment>CB</environment><super>CB.NamedObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>CentralBrainError</name><environment>CB</environment><super>Core.Error</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>ConfigurationError</name><environment>CB</environment><super>CB.CentralBrainError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>APIInterface</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>apiKey apiUrl </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>AbstractOpenAIInterface</name><environment>CB</environment><super>CB.APIInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>AzureOpenAIInterface</name><environment>CB</environment><super>CB.AbstractOpenAIInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>apiVersion subscriptionId resourceGroup </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>AIModel</name><environment>CB</environment><super>CB.NamedObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>metadata </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>AzureDeployedModel</name><environment>CB</environment><super>CB.AIModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>APIError</name><environment>CB</environment><super>CB.CentralBrainError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>GoogleVertexAIInterface</name><environment>CB</environment><super>CB.APIInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>project location </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>DocumentExtractionTool</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>ApacheTikaCLITool</name><environment>CB</environment><super>CB.DocumentExtractionTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>javaPath tikaPath </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>ModelContext</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>api model options </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>Image</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>url bytes contentType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>Index</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vectoreStore api </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>ElasticIndex</name><environment>CB</environment><super>CB.VectorStoreInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>indexName elasticUrl authentication </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>Embedding</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id vector encoding </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>UnsupportedError</name><environment>CB</environment><super>CB.CentralBrainError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>OpenAIInterface</name><environment>CB</environment><super>CB.AbstractOpenAIInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>APIObjectVisitor</name><environment>CB</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modelContext </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>OpenAIWritingVisitor</name><environment>CB</environment><super>CB.APIObjectVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><class><name>GoogleVertexAIWritingVisitor</name><environment>CB</environment><super>CB.APIObjectVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CentralBrain-Core</package></attributes></class><shared-variable><name>DefaultAPI</name><environment>CB.APIInterface</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>CentralBrain-Core</package></attributes></shared-variable><methods><class-id>CB.GoogleVertexAIInterface</class-id> <category>private</category><body package="CentralBrain-Core">completeChat: aChat fromResponse: responseData 	| choices |	choices := ( responseData at: #candidates ) collect: 			[: candidateData | | choiceMessage contentData textStream |				contentData := candidateData at: #content.				textStream := String new writeStream.				( contentData at: #parts ) do: [: part | textStream nextPutAll: (( part at: #text ) reject: [ : char | char codePoint &gt;= 16rffff ])].				choiceMessage := ChatMessage text: textStream contents role: ( contentData at: #role ).				ChatCompletionChoice message: choiceMessage metadata: candidateData			].	^ aChat completeWithChoices: choices</body><body package="CentralBrain-Core">pathForModelContext: aModelContext methd: aMethodName 	| uri |	uri := ( self parentPath , self modelsPath ) asURI.	uri path: ( uri path copyWith: aModelContext model name , ':' , aMethodName ).	^ uri</body></methods><methods><class-id>CB.OpenAIWritingVisitor</class-id> <category>visiting</category><body package="CentralBrain-Core">visitChat: aChat 	| messages chatData |	messages := OrderedCollection new.	aChat promptMessage ifNotNil: [: p | messages add: p ].	messages addAll: aChat messages.	chatData := Dictionary with: #messages -&gt; ( messages collect: [: chatMessage | chatMessage acceptVisitor: self ]).	aChat options keysAndValuesDo: [: optionKey : optionValue | chatData at: optionKey put: optionValue ].	^ chatData</body></methods><methods><class-id>CB.ChatMessage</class-id> <category>accessing</category><body package="CentralBrain-Core">attachment	" An attachment (image, audio) for multi modal chats "	^ attachment</body><body package="CentralBrain-Core">attachment: anAttachment 	" An attachment (image, audio) for multi modal chats "	attachment := anAttachment.</body><body package="CentralBrain-Core">metadata	^ metadata</body><body package="CentralBrain-Core">metadata: aMetadata 	metadata := aMetadata.</body><body package="CentralBrain-Core">role	^ role</body><body package="CentralBrain-Core">role: aRole 	role := aRole.</body><body package="CentralBrain-Core">text	^ text</body><body package="CentralBrain-Core">text: aText 	text := aText.</body></methods><methods><class-id>CB.ChatMessage</class-id> <category>printing</category><body package="CentralBrain-Core">printMessageOn: aStream 	aStream nextPutAll: self role displayString.	aStream nextPutAll: ': '.	self text printOn: aStream.</body><body package="CentralBrain-Core">printOn: aStream 	super printOn: aStream.	aStream nextPutAll: '('.	self printMessageOn: aStream.	aStream nextPutAll: ')'.</body></methods><methods><class-id>CB.ChatMessage</class-id> <category>visitor</category><body package="CentralBrain-Core">acceptVisitor: apiObjectVisitor 	^ apiObjectVisitor visitChatMessage: self</body></methods><methods><class-id>CB.ChatMessage class</class-id> <category>instance creation</category><body package="CentralBrain-Core">text: aText role: aRole 	^ self new text: aText;		role: aRole;		yourself</body><body package="CentralBrain-Core">text: aText role: aRole metadata: metadata	^ self new text: aText;		role: aRole;		metadata: metadata;		yourself</body></methods><methods><class-id>CB.Chat</class-id> <category>accessing</category><body package="CentralBrain-Core">addMessage: aChatMessage	messages add: aChatMessage</body><body package="CentralBrain-Core">addMessageText: aString role: aRole	self addMessage: (ChatMessage text: aString role: aRole)</body><body package="CentralBrain-Core">ask: aString 	self addMessageText: aString role: ChatRole user.</body><body package="CentralBrain-Core">ask: aString attachment: anAttachment 	| message |	message := ChatMessage text: aString role: ChatRole user.	message attachment: anAttachment.	self addMessage: message.</body><body package="CentralBrain-Core">chooseCompletionBlock	^ chooseCompletionBlock</body><body package="CentralBrain-Core">chooseCompletionBlock: aBlock 	" Optional block that receives a ChatCompletion with possible choices and returns a ChatMessage.	The default implementation chooses the first message "	chooseCompletionBlock := aBlock.</body><body package="CentralBrain-Core">chooseMessage: aCompletionChoice 	" Returns the chosen ChatMessage "	^ chooseCompletionBlock notNil 		ifTrue: [ chooseCompletionBlock value: aCompletionChoice ]		ifFalse: [ aCompletionChoice choices first message ]</body><body package="CentralBrain-Core">completeWithChoices: choices	| completion message |	completion := ChatCompletion choices: choices.	message := self chooseMessage: completion.	message notNil 		ifTrue: [ self addMessage: message ].	^ completion</body><body package="CentralBrain-Core">messages	^ messages</body><body package="CentralBrain-Core">messages: aMessages 	messages := aMessages.</body><body package="CentralBrain-Core">modelContext	^ modelContext</body><body package="CentralBrain-Core">modelContext: aModelContext 	modelContext := aModelContext.</body><body package="CentralBrain-Core">optionAt: aKey put: aValue	options at: aKey put: aValue</body><body package="CentralBrain-Core">options	^ options</body><body package="CentralBrain-Core">prompt: aString	self promptMessage: ( ChatMessage text: aString role: ChatRole system ).</body><body package="CentralBrain-Core">promptMessage	^ promptMessage</body><body package="CentralBrain-Core">promptMessage: aPromptMessage 	promptMessage := aPromptMessage.</body></methods><methods><class-id>CB.Chat</class-id> <category>initialize-release</category><body package="CentralBrain-Core">initialize	messages := OrderedCollection new.	options := Dictionary new.</body></methods><methods><class-id>CB.Chat</class-id> <category>printing</category><body package="CentralBrain-Core">printOn: aStream 	super printOn: aStream.	aStream nextPutAll: '(model: '.	( modelContext ifNotNil: [: c | c model name ]) printOn: aStream.	messages notEmpty 		ifTrue: 		[	aStream nextPutAll: ', messages: '.			aStream print: messages size.			aStream nextPutAll: ', last: '.			messages last printMessageOn: aStream		].	aStream nextPutAll: ')'.</body></methods><methods><class-id>CB.Chat</class-id> <category>api</category><body package="CentralBrain-Core">complete	^ self completeWithContext: self modelContextOrError</body><body package="CentralBrain-Core">completeWithContext: aModelContext	^ aModelContext api completeChat: self modelContext: aModelContext</body></methods><methods><class-id>CB.Chat</class-id> <category>private</category><body package="CentralBrain-Core">modelContextOrError	^ modelContext ifNil: 		[	APIInterface defaultAPI 				ifNotNil: [: api | api defaultTextGenerationContext ]				ifNil: [ ConfigurationError raiseNoModelContextSpecified ]		]</body></methods><methods><class-id>CB.Chat</class-id> <category>visitor</category><body package="CentralBrain-Core">acceptVisitor: apiObjectVisitor 	^ apiObjectVisitor visitChat: self</body></methods><methods><class-id>CB.Chat class</class-id> <category>instance creation</category><body package="CentralBrain-Core">modelContext: aModelContext 	^ self new modelContext: aModelContext;		yourself</body><body package="CentralBrain-Core">new	^ super new initialize</body><body package="CentralBrain-Core">newWithAPI: api	^ self modelContext: api defaultTextGenerationContext</body><body package="CentralBrain-Core">newWithDefaultContext	^ self newWithAPI: APIInterface defaultAPI</body><body package="CentralBrain-Core">newWithVisionContext	^ self modelContext: APIInterface defaultAPI defaultVisionContext</body></methods><methods><class-id>CB.ChatCompletion</class-id> <category>accessing</category><body package="CentralBrain-Core">choices	^ choices</body><body package="CentralBrain-Core">choices: aListOfChoices	choices := aListOfChoices</body></methods><methods><class-id>CB.ChatCompletion class</class-id> <category>instance creation</category><body package="CentralBrain-Core">choices: aListOfChoices	^ self new choices: aListOfChoices; yourself</body></methods><methods><class-id>CB.VectorStoreInterface</class-id> <category>api</category><body package="CentralBrain-Core">storeEmbedding: anEmbeddingVector	self subclassResponsibility </body></methods><methods><class-id>CB.ChatCompletionChoice</class-id> <category>accessing</category><body package="CentralBrain-Core">message	^ message</body><body package="CentralBrain-Core">message: aMessage 	message := aMessage.</body><body package="CentralBrain-Core">metadata	^ metadata</body><body package="CentralBrain-Core">metadata: aMetadata 	metadata := aMetadata.</body></methods><methods><class-id>CB.ChatCompletionChoice</class-id> <category>printing</category><body package="CentralBrain-Core">printOn: aStream	super printOn: aStream.	aStream nextPutAll: '('.	self message text printOn: aStream.	aStream nextPutAll: ')'.</body></methods><methods><class-id>CB.ChatCompletionChoice class</class-id> <category>instance creation</category><body package="CentralBrain-Core">message: aMessage metadata: aMetadata 	^ self new message: aMessage; metadata: aMetadata; yourself</body></methods><methods><class-id>CB.Document</class-id> <category>accessing</category><body package="CentralBrain-Core">id	^ id</body><body package="CentralBrain-Core">id: aString 	id := aString.</body><body package="CentralBrain-Core">metadata	^ metadata</body><body package="CentralBrain-Core">metadata: aMetadata 	metadata := aMetadata.</body><body package="CentralBrain-Core">text	^ text</body><body package="CentralBrain-Core">text: aText 	text := aText.</body></methods><methods><class-id>CB.Document</class-id> <category>printing</category><body package="CentralBrain-Core">printOn: aStream 	| max |	super printOn: aStream.	aStream nextPutAll: '(length: '.	text size printOn: aStream.	aStream nextPutAll: ', text: '''.	max := 160.	text size &lt; max 		ifTrue: [ aStream nextPutAll: text ]		ifFalse: 		[	aStream nextPutAll: ( text copyFrom: 1 to: max ).			aStream nextPutAll: '[...]'		].	aStream nextPutAll: ')'.</body></methods><methods><class-id>CB.Document</class-id> <category>api</category><body package="CentralBrain-Core">embeddings	^ self embeddingsWithContext: self embeddingContextOrError</body><body package="CentralBrain-Core">embeddingsWithAPI: api	^ self embeddingsWithContext: api defaultEmbeddingContext</body><body package="CentralBrain-Core">embeddingsWithContext: modelContext	^ modelContext api embeddingsForDocument: self modelContext: modelContext</body></methods><methods><class-id>CB.Document</class-id> <category>private</category><body package="CentralBrain-Core">embeddingContextOrError	^ APIInterface defaultAPI 		ifNotNil: [: api | api defaultEmbeddingContext ]		ifNil: [ ConfigurationError raiseNoModelContextSpecified ]</body></methods><methods><class-id>CB.Document</class-id> <category>visitor</category><body package="CentralBrain-Core">acceptVisitor: apiObjectVisitor 	^ apiObjectVisitor visitDocument: self</body></methods><methods><class-id>CB.Document class</class-id> <category>instance creation</category><body package="CentralBrain-Core">text: aString	^ self text: aString metadata: Dictionary new</body><body package="CentralBrain-Core">text: aString metadata: aDictionary	^ self new text: aString; metadata: aDictionary; yourself</body></methods><methods><class-id>CB.NamedObject</class-id> <category>accessing</category><body package="CentralBrain-Core">name	^ name</body><body package="CentralBrain-Core">name: aName 	name := aName.</body></methods><methods><class-id>CB.NamedObject</class-id> <category>printing</category><body package="CentralBrain-Core">displayString	^ self name</body><body package="CentralBrain-Core">printModelOn: aStream 	name printOn: aStream.</body><body package="CentralBrain-Core">printOn: aStream 	super printOn: aStream.	aStream nextPutAll: '('.	self printModelOn: aStream.	aStream nextPutAll: ')'.</body></methods><methods><class-id>CB.NamedObject class</class-id> <category>instance creation</category><body package="CentralBrain-Core">named: aName 	^ self new name: aName; yourself</body></methods><methods><class-id>CB.ChatRole class</class-id> <category>instance creation</category><body package="CentralBrain-Core">system	^ self named: #system</body><body package="CentralBrain-Core">user	^ self named: #user</body></methods><methods><class-id>CB.ConfigurationError class</class-id> <category>instance creation</category><body package="CentralBrain-Core">raiseNoModelContextSpecified	ConfigurationError raiseSignal: #noModelContextSpecified &lt;&lt; #cb &gt;&gt; 'No model context specified'</body></methods><methods><class-id>CB.APIInterface</class-id> <category>private - http</category><body package="CentralBrain-Core">authorizeRequest: request 	request authorization: 'Bearer ' , self apiKey.</body><body package="CentralBrain-Core">contentTypeJson	^ 'application/json'</body><body package="CentralBrain-Core">createRequest: aPathOrURI method: aMethod 	" Creates an empty, authenticated request object "	| request uri requestUrl |	uri := aPathOrURI asURI.	requestUrl := uri isPartial 			ifTrue: 			[	" enforce relative URI "				uri path first isEmpty 					ifTrue: 					[	uri := uri copy.						uri path: ( uri path copyFrom: 2 to: uri path size )					].				self apiUrl asURI , uri			]			ifFalse: [ uri ].	request := Net.HttpRequest method: aMethod url: requestUrl.	self authorizeRequest: request.	^ request</body><body package="CentralBrain-Core">executeRequest: aHttpRequest 	^ Net.HttpClient clientDo: 		[: client |			[ | response |				response := client executeRequest: aHttpRequest.				response contentType = self contentTypeJson 					ifTrue: [ Xtreams.JSON decode: response contents ]					ifFalse: [ nil ]			] on: Net.HttpException do: [: ex | APIError raiseWith: ex errorString: ex description ]		]</body><body package="CentralBrain-Core">get: aPath 	^ self executeRequest: ( self createRequest: aPath method: 'GET' )</body><body package="CentralBrain-Core">post: anObject path: aPath 	| request |	request := self createRequest: aPath method: 'POST'.	request contents: ( Xtreams.JSON encode: anObject ).	request contentType: self contentTypeJson.	^ self executeRequest: request</body></methods><methods><class-id>CB.APIInterface</class-id> <category>constants</category><body package="CentralBrain-Core">defaultApiUrl	" Note: The URL must not end with a slash if it contains a path "	self subclassResponsibility</body></methods><methods><class-id>CB.APIInterface</class-id> <category>private</category><body package="CentralBrain-Core">raiseUnsupported: featureName	UnsupportedError raiseSignal: ((#unsupportedSubApi &lt;&lt; #cb &gt;&gt; '&lt;1s&gt; API is not implemented by &lt;2s&gt;') expandMacrosWith: featureName with: self class name)</body></methods><methods><class-id>CB.APIInterface</class-id> <category>api</category><body package="CentralBrain-Core">availableModels	" List available models "	self subclassResponsibility</body></methods><methods><class-id>CB.APIInterface</class-id> <category>api - embeddings</category><body package="CentralBrain-Core">defaultEmbeddingContext	^ self contextForModel: self defaultEmbeddingModel</body><body package="CentralBrain-Core">defaultEmbeddingModel	^ self class defaultEmbeddingModelName 		ifNotNil: [: modelName | AIModel named: modelName ]		ifNil: [ self raiseUnsupported: 'Embedding' ]</body><body package="CentralBrain-Core">embeddingsForDocument: aDocument modelContext: aModel	self raiseUnsupported: 'Embedding'</body></methods><methods><class-id>CB.APIInterface</class-id> <category>api - text generation</category><body package="CentralBrain-Core">completeChat: aChat modelContext: aModelContext	self raiseUnsupported: 'Chat'</body><body package="CentralBrain-Core">defaultTextGenerationContext	^ self contextForModel: self defaultTextGenerationModel</body><body package="CentralBrain-Core">defaultTextGenerationModel	^ self class defaultTextGenerationModelName 		ifNotNil: [: modelName | AIModel named: modelName ]		ifNil: [ self raiseUnsupported: 'Chat' ]</body></methods><methods><class-id>CB.APIInterface</class-id> <category>accessing</category><body package="CentralBrain-Core">apiKey	^ apiKey</body><body package="CentralBrain-Core">apiKey: aApiKey 	apiKey := aApiKey.</body><body package="CentralBrain-Core">apiUrl	^ apiUrl ifNil: [ self defaultApiUrl ]</body><body package="CentralBrain-Core">apiUrl: anUrl 	apiUrl := anUrl asURI.	" Note: The URL must end with a slash if it contains a path "	( apiUrl path notEmpty and: [ apiUrl path last notEmpty ]) 		ifTrue: 		[	apiUrl := apiUrl copy.			apiUrl path: ( apiUrl path copyWith: '' )		].</body><body package="CentralBrain-Core">contextForModel: aModel	^ ModelContext api: self model: aModel</body><body package="CentralBrain-Core">setAsDefault	self class defaultAPI: self</body></methods><methods><class-id>CB.APIInterface</class-id> <category>api - vision</category><body package="CentralBrain-Core">defaultVisionContext	^ self contextForModel: self defaultVisionModel</body><body package="CentralBrain-Core">defaultVisionModel	^ self class defaultVisionModelName 		ifNotNil: [: modelName | AIModel named: modelName ]		ifNil: [ self raiseUnsupported: 'Vision' ]</body></methods><methods><class-id>CB.APIInterface class</class-id> <category>instance creation</category><body package="CentralBrain-Core">apiKey: aApiKey 	^ self new apiKey: aApiKey;		yourself</body></methods><methods><class-id>CB.APIInterface class</class-id> <category>accessing</category><body package="CentralBrain-Core">defaultAPI	| api |	api := DefaultAPI.	api isNil ifTrue: [ ConfigurationError raiseSignal: (#defaultApiNotSet &lt;&lt; #cb &gt;&gt; 'Default API not set') ].	^ api</body><body package="CentralBrain-Core">defaultAPI: anAPIInterface	DefaultAPI := anAPIInterface </body></methods><methods><class-id>CB.APIInterface class</class-id> <category>constants</category><body package="CentralBrain-Core">defaultEmbeddingModelName	^ nil</body><body package="CentralBrain-Core">defaultTextGenerationModelName	^ nil</body><body package="CentralBrain-Core">defaultVisionModelName	^ nil</body></methods><methods><class-id>CB.AbstractOpenAIInterface</class-id> <category>private - http</category><body package="CentralBrain-Core">post: anObject path: aPath model: aModel	anObject at: #model put: aModel name.	^ self post: anObject path: aPath </body></methods><methods><class-id>CB.AbstractOpenAIInterface</class-id> <category>api</category><body package="CentralBrain-Core">availableModels	" Available models "	| reponseData |	reponseData := self get: self modelsPath.	^ ( reponseData at: #data ifAbsent: [ #( )]) 		collect: [: modelData | AIModel named: ( modelData at: #id ) metadata: modelData ]</body></methods><methods><class-id>CB.AbstractOpenAIInterface</class-id> <category>api - embeddings</category><body package="CentralBrain-Core">embeddingsForDocument: aDocument modelContext: aModelContext 	| data responseData |	data := OpenAIWritingVisitor modelContext: aModelContext visit: aDocument.	responseData := self post: data path: self embeddingsPath model: aModelContext model.	^ ( responseData at: #data ifAbsent: [ #( )]) collect: 		[: embeddingData |			Embedding id: aDocument id vector: ( embeddingData at: #embedding ) encoding: ( data at: #'encoding_format' )		]</body></methods><methods><class-id>CB.AbstractOpenAIInterface</class-id> <category>api - text generation</category><body package="CentralBrain-Core">completeChat: aChat modelContext: aModelContext 	| chatData responseData |	chatData := OpenAIWritingVisitor modelContext: aModelContext visit: aChat.	responseData := self post: chatData path: self completionPath model: aModelContext model.	^ self completeChat: aChat fromResponse: responseData</body></methods><methods><class-id>CB.AbstractOpenAIInterface</class-id> <category>constants</category><body package="CentralBrain-Core">completionPath	^ self subclassResponsibility </body><body package="CentralBrain-Core">defaultEmbeddingEncoding	^ #float</body><body package="CentralBrain-Core">embeddingsPath	^ self subclassResponsibility </body><body package="CentralBrain-Core">modelsPath	^ self subclassResponsibility </body></methods><methods><class-id>CB.AbstractOpenAIInterface</class-id> <category>private</category><body package="CentralBrain-Core">completeChat: aChat fromResponse: responseData 	| choices |	choices := ( responseData at: #choices ) collect: 			[: choiceData | | choiceMessage messageData |				messageData := choiceData at: #message.				choiceMessage := ChatMessage text: ( messageData at: #content ) role: ( messageData at: #role ).				ChatCompletionChoice message: choiceMessage metadata: choiceData			].	^ aChat completeWithChoices: choices</body></methods><methods><class-id>CB.AzureOpenAIInterface</class-id> <category>private - http</category><body package="CentralBrain-Core">authorizeRequest: request 	request fieldValueAt: 'api-key' put: self apiKey.</body><body package="CentralBrain-Core">post: anObject path: aPath model: aModel	^ self post: anObject path: 'openai/deployments/', aModel azureDeploymentName, '/', aPath, '?api-version=', self apiVersion</body></methods><methods><class-id>CB.AzureOpenAIInterface</class-id> <category>accessing</category><body package="CentralBrain-Core">apiVersion	^ apiVersion ifNil: [self defaultApiVersion ]</body><body package="CentralBrain-Core">apiVersion: aApiVersion 	apiVersion := aApiVersion.</body><body package="CentralBrain-Core">resourceGroup	^ resourceGroup</body><body package="CentralBrain-Core">resourceGroup: aResourceGroup 	resourceGroup := aResourceGroup.</body><body package="CentralBrain-Core">subscriptionId	^ subscriptionId</body><body package="CentralBrain-Core">subscriptionId: aSubscriptionId 	subscriptionId := aSubscriptionId.</body></methods><methods><class-id>CB.AzureOpenAIInterface</class-id> <category>api</category><body package="CentralBrain-Core">deployments	" Returns the deployed models "	| reponseData |	reponseData := self get: self managementUrl , ( self deploymentsPathPattern 							expandMacrosWith: self subscriptionIdOrError							with: self resourceGroupOrError							with: self managementApiVersion ).	^ ( reponseData at: #value ifAbsent: [ #( )]) 		collect: [: deploymentData | AzureDeployedModel named: ( deploymentData at: #name ) metadata: deploymentData ]</body></methods><methods><class-id>CB.AzureOpenAIInterface</class-id> <category>private</category><body package="CentralBrain-Core">raiseNoDeployedModelSpecified	ConfigurationError raiseSignal: (#noDeployedModelSpecified &lt;&lt; #cb &gt;&gt; 'No deployed model specified')</body><body package="CentralBrain-Core">resourceGroupOrError	^ self subscriptionId ifNil: [ ConfigurationError raiseSignal: (#resourceGroupNotSet &lt;&lt; #cb &gt;&gt; 'Resource group not set') ]</body><body package="CentralBrain-Core">subscriptionIdOrError	^ self subscriptionId ifNil: [ ConfigurationError raiseSignal: (#subscriptionIdNotSet &lt;&lt; #cb &gt;&gt; 'Subscription ID not set') ]</body></methods><methods><class-id>CB.AzureOpenAIInterface</class-id> <category>constants</category><body package="CentralBrain-Core">defaultApiUrl	" See https://learn.microsoft.com/en-us/azure/ai-services/openai/quickstart "	^ ConfigurationError raiseSignal: (#apiUrlNotSet &lt;&lt; #cb &gt;&gt; 'The API endpoint URL was not set')</body><body package="CentralBrain-Core">defaultApiVersion	^ '2024-02-01'</body><body package="CentralBrain-Core">deploymentsPathPattern	^ '/subscriptions/&lt;1s&gt;/resourceGroups/&lt;2s&gt;/providers/Microsoft.CognitiveServices/accounts/accountName/deployments?api-version=&lt;3s&gt;'</body><body package="CentralBrain-Core">managementApiVersion	^ '2023-05-01'</body><body package="CentralBrain-Core">managementUrl	^ 'https://management.azure.com'</body><body package="CentralBrain-Core">modelsPath	^ '/openai/models?api-version=', self apiVersion</body></methods><methods><class-id>CB.AzureOpenAIInterface class</class-id> <category>constants</category><body package="CentralBrain-Core">defaultEmbeddingModelName	^ nil</body><body package="CentralBrain-Core">defaultTextGenerationModelName	^ nil</body><body package="CentralBrain-Core">defaultVisionModelName	^ nil</body></methods><methods><class-id>CB.AIModel</class-id> <category>accessing</category><body package="CentralBrain-Core">metadata	" API specific metadata (usually the raw data returned by the API) "	^ metadata</body><body package="CentralBrain-Core">metadata: aMetadata 	" API specific metadata (usually the raw data returned by the API) "	metadata := aMetadata.</body></methods><methods><class-id>CB.AIModel</class-id> <category>azure</category><body package="CentralBrain-Core">azureDeploymentName	" Azure requires to deploy deploy a model and then use the name of the deployment in subsequent API calls.	Assume that the name here is the deployed name "	^ self name</body></methods><methods><class-id>CB.AIModel class</class-id> <category>instance creation</category><body package="CentralBrain-Core">named: aModelName 	^ self named: aModelName metadata: Dictionary new</body><body package="CentralBrain-Core">named: aName metadata: aMetadata 	^ self new name: aName; metadata: aMetadata ; yourself</body></methods><methods><class-id>CB.AzureDeployedModel</class-id> <category>accessing</category><body package="CentralBrain-Core">modelName	self metadata at: #properties ifPresent: [ : properties |		properties at: #model ifPresent: [ : model |			model at: #name ifPresent: [ : modelName | ^ modelName ]		].	].	^ nil</body></methods><methods><class-id>CB.AzureDeployedModel</class-id> <category>printing</category><body package="CentralBrain-Core">printModelOn: aStream 	aStream nextPutAll: 'deployment: '.	name printOn: aStream.	self modelName ifNotNil: [: modelName |		aStream nextPutAll: ', model: '.		modelName printOn: aStream.	].</body></methods><methods><class-id>CB.GoogleVertexAIInterface</class-id> <category>accessing</category><body package="CentralBrain-Core">location	^ location ifNil: [ self defaultLocation ]</body><body package="CentralBrain-Core">location: aLocation 	location := aLocation.</body><body package="CentralBrain-Core">project	^ project</body><body package="CentralBrain-Core">project: aProject 	project := aProject.</body></methods><methods><class-id>CB.GoogleVertexAIInterface</class-id> <category>api - text generation</category><body package="CentralBrain-Core">completeChat: aChat modelContext: aModelContext 	| requestData responseData |	requestData := GoogleVertexAIWritingVisitor modelContext: aModelContext visit: aChat.	responseData := self 			post: requestData			path: ( self pathForModelContext: aModelContext methd: self generateContentMethod ).	^ self completeChat: aChat fromResponse: responseData</body></methods><methods><class-id>CB.GoogleVertexAIInterface</class-id> <category>constants</category><body package="CentralBrain-Core">defaultApiUrl	" See		https://cloud.google.com/vertex-ai/docs/reference/rest		https://cloud.google.com/vertex-ai/docs/general/locations?hl=de#feature-availability	"	^ 'https://&lt;1s&gt;-aiplatform.googleapis.com/&lt;2s&gt;/' expandMacrosWith: self locationOrError with: self defaultApiVersion</body><body package="CentralBrain-Core">defaultApiVersion	^ 'v1'</body><body package="CentralBrain-Core">defaultLocation	^ 'us-central1'</body><body package="CentralBrain-Core">generateContentMethod	^ 'generateContent'</body><body package="CentralBrain-Core">modelPathPattern	^ '/publishers/google/models/&lt;1s&gt;'</body><body package="CentralBrain-Core">modelsPath	^ '/publishers/google/models'</body></methods><methods><class-id>CB.GoogleVertexAIInterface</class-id> <category>private</category><body package="CentralBrain-Core">locationOrError	^ self location ifNil: [ ConfigurationError raiseSignal: (#locationNotSet &lt;&lt; #cb &gt;&gt; 'Location not set') ]</body><body package="CentralBrain-Core">parentPath	^ '/projects/&lt;1s&gt;/locations/&lt;2s&gt;' expandMacrosWith: self projectOrError with: self locationOrError</body><body package="CentralBrain-Core">projectOrError	^ self project ifNil: [ ConfigurationError raiseSignal: (#projectNotSet &lt;&lt; #cb &gt;&gt; 'Project not set') ]</body></methods><methods><class-id>CB.GoogleVertexAIInterface class</class-id> <category>instance creation</category><body package="CentralBrain-Core">apiKey: aApiKey project: aProject location: aLocation 	^ ( self apiKey: aApiKey )		project: aProject;		location: aLocation;		yourself</body></methods><methods><class-id>CB.GoogleVertexAIInterface class</class-id> <category>constants</category><body package="CentralBrain-Core">defaultTextGenerationModelName	^ 'gemini-1.5-pro'</body></methods><methods><class-id>CB.DocumentExtractionTool</class-id> <category>api</category><body package="CentralBrain-Core">extractDocumentFromFile: filename	" Returns a Document with the text context (and possibly metadata) extracted from the file "	self subclassResponsibility</body></methods><methods><class-id>CB.ApacheTikaCLITool</class-id> <category>accessing</category><body package="CentralBrain-Core">javaPath	^ javaPath</body><body package="CentralBrain-Core">javaPath: aJavaPath 	javaPath := aJavaPath.</body><body package="CentralBrain-Core">tikaPath	^ tikaPath</body><body package="CentralBrain-Core">tikaPath: aTikaPath 	tikaPath := aTikaPath.</body></methods><methods><class-id>CB.ModelContext</class-id> <category>accessing</category><body package="CentralBrain-Core">api	^ api</body><body package="CentralBrain-Core">api: aApi 	api := aApi.</body><body package="CentralBrain-Core">model	^ model</body><body package="CentralBrain-Core">model: anAIModel 	model := anAIModel.</body><body package="CentralBrain-Core">optionAt: aKey ifAbsent: aBlock	" Returns an API specific option "	^ options at: aKey ifAbsent: aBlock</body><body package="CentralBrain-Core">optionAt: aKey put: aValue	" Sets an API specific option "	options at: aKey put: aValue</body><body package="CentralBrain-Core">options	" API specific options dictionary "	^ options</body></methods><methods><class-id>CB.ModelContext</class-id> <category>printing</category><body package="CentralBrain-Core">printOn: aStream 	super printOn: aStream.	aStream nextPutAll: '(model: '.	model notNil 		ifTrue: [ model name printOn: aStream ]		ifFalse: [ nil printOn: aStream ].	aStream nextPutAll: ', api: '.	self api printOn: aStream.	aStream nextPutAll: ')'.</body></methods><methods><class-id>CB.ModelContext</class-id> <category>initialize-release</category><body package="CentralBrain-Core">initialize	options := Dictionary new</body></methods><methods><class-id>CB.ModelContext class</class-id> <category>instance creation</category><body package="CentralBrain-Core">api: anApi model: aModel 	^ self new api: anApi;		model: aModel;		yourself</body><body package="CentralBrain-Core">new	^super new initialize</body></methods><methods><class-id>CB.Image</class-id> <category>accessing</category><body package="CentralBrain-Core">bytes	^ bytes</body><body package="CentralBrain-Core">bytes: aBytes 	bytes := aBytes.</body><body package="CentralBrain-Core">contentType	^ contentType</body><body package="CentralBrain-Core">contentType: aContentType 	contentType := aContentType.</body><body package="CentralBrain-Core">imageUrl	^ self url ifNil: [ 'data:', self contentType, ';base64,' , self encodeBase64 ]</body><body package="CentralBrain-Core">url	^ url</body><body package="CentralBrain-Core">url: aUrl 	url := aUrl.</body></methods><methods><class-id>CB.Image</class-id> <category>private</category><body package="CentralBrain-Core">encodeBase64	| output |	output := ( ByteArray new withEncoding: #base64 ) writeStream.	self bytes do: [: byte | output nextPut: ( Character value: byte )].	output close.	^ output encodedContents asByteString</body></methods><methods><class-id>CB.Image</class-id> <category>visitor</category><body package="CentralBrain-Core">acceptVisitor: apiObjectVisitor 	^ apiObjectVisitor visitImage: self</body></methods><methods><class-id>CB.Image class</class-id> <category>instance creation</category><body package="CentralBrain-Core">bytes: aByteArray contentType: aContentType 	" Must be a format that is supported by the API, not the internal VW image bits "	^ self new bytes: aByteArray; contentType: aContentType ; yourself</body><body package="CentralBrain-Core">filename: aFilename 	" Must be a format that is supported by the API, not the internal VW image bits "	^ self filename: aFilename contentType: (Net.MimeEntity mimeTypeForFile: aFilename)</body><body package="CentralBrain-Core">filename: aFilename contentType: aContentType 	" Must be a format that is supported by the API, not the internal VW image bits "	^ self bytes: (aFilename asFilename withEncoding: #binary) contentsOfEntireFile contentType: aContentType</body><body package="CentralBrain-Core">url: aUrl 	^ self new		url: aUrl;		yourself</body></methods><methods><class-id>CB.Index</class-id> <category>accessing</category><body package="CentralBrain-Core">api	^ api</body><body package="CentralBrain-Core">api: aApi 	api := aApi.</body><body package="CentralBrain-Core">vectoreStore	^ vectoreStore</body><body package="CentralBrain-Core">vectoreStore: aVectoreStore 	vectoreStore := aVectoreStore.</body></methods><methods><class-id>CB.Index class</class-id> <category>instance creation</category><body package="CentralBrain-Core">vectoreStore: aVectoreStore api: aApi 	^ self new vectoreStore: aVectoreStore;		api: aApi;		yourself</body></methods><methods><class-id>CB.ElasticIndex</class-id> <category>accessing</category><body package="CentralBrain-Core">authentication	^ authentication</body><body package="CentralBrain-Core">authentication: aAuthentication 	authentication := aAuthentication.</body><body package="CentralBrain-Core">elasticUrl	^ elasticUrl</body><body package="CentralBrain-Core">elasticUrl: aElasticUrl 	elasticUrl := aElasticUrl.</body><body package="CentralBrain-Core">indexName	^ indexName</body><body package="CentralBrain-Core">indexName: aIndexName 	indexName := aIndexName.</body></methods><methods><class-id>CB.ElasticIndex class</class-id> <category>instance creation</category><body package="CentralBrain-Core">indexName: aIndexName elasticUrl: anUrl authentication: aHttpAuthentication 	^ self new		indexName: aIndexName;		elasticUrl: anUrl;		authentication: aHttpAuthentication;		yourself</body></methods><methods><class-id>CB.Embedding</class-id> <category>accessing</category><body package="CentralBrain-Core">encoding	^ encoding</body><body package="CentralBrain-Core">encoding: aEncoding 	encoding := aEncoding.</body><body package="CentralBrain-Core">id	^ id</body><body package="CentralBrain-Core">id: aId 	id := aId.</body><body package="CentralBrain-Core">vector	^ vector</body><body package="CentralBrain-Core">vector: aVector 	vector := aVector.</body></methods><methods><class-id>CB.Embedding class</class-id> <category>instance creation</category><body package="CentralBrain-Core">id: anId vector: aVector encoding: anEncoding 	^ self new		id: anId;		vector: aVector;		encoding: anEncoding;		yourself</body></methods><methods><class-id>CB.OpenAIInterface</class-id> <category>constants</category><body package="CentralBrain-Core">completionPath	^ '/chat/completions'</body><body package="CentralBrain-Core">defaultApiUrl	^ 'https://api.openai.com/v1/' asURI</body><body package="CentralBrain-Core">embeddingsPath	^ '/embeddings'</body><body package="CentralBrain-Core">modelsPath	^ '/models'</body></methods><methods><class-id>CB.OpenAIInterface class</class-id> <category>constants</category><body package="CentralBrain-Core">defaultEmbeddingModelName	^ 'text-embedding-3-small'</body><body package="CentralBrain-Core">defaultTextGenerationModelName	^ 'gpt-3.5-turbo'</body><body package="CentralBrain-Core">defaultVisionModelName	^ 'gpt-4-turbo'</body></methods><methods><class-id>CB.APIObjectVisitor</class-id> <category>visiting</category><body package="CentralBrain-Core">visit: anObject	^ anObject acceptVisitor: self </body><body package="CentralBrain-Core">visitChat: aChat	^ nil</body><body package="CentralBrain-Core">visitChatMessage: aChatMessage	^ nil</body><body package="CentralBrain-Core">visitDocument: aDocument	^ nil</body><body package="CentralBrain-Core">visitImage: anImage	^ nil</body></methods><methods><class-id>CB.APIObjectVisitor</class-id> <category>accessing</category><body package="CentralBrain-Core">modelContext	^ modelContext</body><body package="CentralBrain-Core">modelContext: aModelContext 	modelContext := aModelContext.</body></methods><methods><class-id>CB.APIObjectVisitor class</class-id> <category>instance creation</category><body package="CentralBrain-Core">modelContext: aModelContext	^ self new modelContext: aModelContext; yourself</body><body package="CentralBrain-Core">modelContext: aModelContext visit: anObject	^ (self modelContext: aModelContext) visit: anObject</body><body package="CentralBrain-Core">visit: anObject	^ self new visit: anObject</body></methods><methods><class-id>CB.OpenAIWritingVisitor</class-id> <category>visiting</category><body package="CentralBrain-Core">visitChatMessage: aChatMessage 	| content |	content := aChatMessage attachment 			ifNotNil: 			[: attachment |				Array 					with: ( Dictionary with: #type -&gt; 'text' with: #text -&gt; aChatMessage text )					with: ( attachment acceptVisitor: self )			]			ifNil: [ aChatMessage text ].	^ Dictionary new at: #role put: aChatMessage role name;		at: #content put: content;		yourself</body><body package="CentralBrain-Core">visitDocument: aDocument 	| encoding |	encoding := self modelContext 			optionAt: #'encoding_format'			ifAbsent: [ self modelContext api defaultEmbeddingEncoding asString ].	^ Dictionary new		at: #input put: aDocument text;		at: #'encoding_format' put: encoding;		yourself</body><body package="CentralBrain-Core">visitImage: anImage 	^ Dictionary with: #type -&gt; 'image_url' with: #'image_url' -&gt; (Dictionary with: #url -&gt; anImage imageUrl)</body></methods><methods><class-id>CB.GoogleVertexAIWritingVisitor</class-id> <category>visiting</category><body package="CentralBrain-Core">visitChat: aChat 	^ Dictionary with: #contents -&gt; ( aChat messages collect: [: chatMessage | chatMessage acceptVisitor: self ])</body><body package="CentralBrain-Core">visitChatMessage: aChatMessage 	^ Dictionary 		with: #role -&gt; aChatMessage role name		with: #parts -&gt; ( Array with: ( Dictionary with: #text -&gt; aChatMessage text ))</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Error</name><environment>Core</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class></st-source>